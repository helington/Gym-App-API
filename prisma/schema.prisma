generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  exercises        Exercise[]
  workoutTemplates WorkoutTemplate[]
  RefreshToken     RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @default(uuid()) @db.VarChar(36)
  userId    Int      @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Exercise {
  id           Int        @id @default(autoincrement())
  name         String
  muscle       String
  equipment    String
  difficulty   String
  instructions String?
  visibility   Visibility @default(PUBLIC)
  ownerId      Int?

  owner             User?               @relation(fields: [ownerId], references: [id])
  logs              ExerciseLog[]
  TemplateExercises TemplateExercises[]
}

model WorkoutTemplate {
  id     Int    @id @default(autoincrement())
  userId Int
  title  String

  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutSessions WorkoutSession[]
  exercises       TemplateExercises[]
}

model TemplateExercises {
  id         Int @id @default(autoincrement())
  templateId Int
  exerciseId Int

  template WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exercise Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model WorkoutSession {
  id         Int      @id @default(autoincrement())
  templateId Int
  date       DateTime @default(now())
  notes      String?

  template WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  logs     ExerciseLog[]
}

model ExerciseLog {
  id         Int   @id @default(autoincrement())
  sessionId  Int
  exerciseId Int
  setNumber  Int
  reps       Int
  weight     Float

  session  WorkoutSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise Exercise       @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

enum Visibility {
  PUBLIC
  PRIVATE
}
